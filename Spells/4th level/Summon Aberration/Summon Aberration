/*
Original Code taken from Kuffeh1's Summon Beast Spell Macro:
https://github.com/Kuffeh1/Foundry/blob/main/Spells/Level%202/Summon%20Beast

Modified by DarkDragonMC for Summon Aberrant Spell Macro.

Modules Used - MidiQOL, ItemMacro, Warpgate, JB2A (Free or Patreon), Sequencer [for the effects, optional]

Set Up - You need to ensure you have an actor called 'Aberrant Spirit'

MidiQOL OnUse -  ItemMacro - before active effect
*/

const casterToken = game.actors.get(args[0].actor._id);
const tokenD = canvas.tokens.get(args[0].tokenId);
const spelllevel = args[0].spellLevel;
const level = casterToken.data.data.details.level;

// create menu options
let choices = await warpgate.dialog([

    {
        type: 'header',
        label: `Type`
    },
    {
        type: 'radio',
        label: `Slaad`,
    },
    {
        type: 'radio',
        label: `Star Spawn`,
    },
    {
        type: 'radio',
        label: `Beholderkin`,
    },
],
    "⚔️ Choose your spirit:",
    "Call Forth!")

let spiritArray = [choices[1], choices[2], choices[3]];
spiritArray = spiritArray.filter(Boolean);
let summon = spiritArray[0];

// Name of Actor that will be used
const summonType = `Aberrant Spirit`;

// Finding out if the spell was upcast and saving that information
let upcastHP = ' ';
if (spelllevel >= 3) { upcastHP = `${((spelllevel - 3) * 10)}`; }

// Adjusts the spirit's Hit Points based on the level that the spell was cast
let spiritHP = ' ';
if (spelllevel < 3) { spiritHP = parseInt(30) }
if (spelllevel >= 3) { spiritHP = parseInt(30) + parseInt(upcastHP); }

// Changes the image for each spirit option
let spiritImg = '';
if (summon === 'Slaad') { spiritImg = 'https://i.imgur.com/VzO6Cfn.png'; }
if (summon === 'Star Spawn') { spiritImg = 'https://i.imgur.com/Regbgsk.png'; }
if (summon === 'Beholderkin') { spiritImg = 'https://i.imgur.com/IvtYjz3.png'; }

// selects which token is created based on which option was chosen. 
let updates = {}
if (summon === 'Slaad') { // Summons a Slaad Aberrant Spirit Token
    updates = {
        token: { // Changes the image and name of the token
            'img': spiritImg,
            'name': `${summon} Aberrant Spirit of ${casterToken.name}`,
        },
        actor: { // Modifying the actor's AC, HP, CR, and movement
            'name': `${summon} Aberrant Spirit of ${casterToken.name}`,
            'data.attributes.ac.formula': 11 + spelllevel,
            'data.attributes.hp': { value: spiritHP, max: spiritHP },
            'data.details.cr': level,
            'data.attributes.movement': { walk: 30, fly: 30, hover: false },
        },

        embedded: {
            Item: { // Modifying the actor's Features and Attacks
                "Multiattack":
                    { 'name': `Multiattack (${Math.floor(spelllevel / 2)} attacks)` },
                "Claws (Slaad Only)":
                    { 'data.damage.parts': ['1d10 + @mod + ${spelllevel}', 'slashing'] },
                // Deleting unused Items
                "Eye Ray (Beholderkin Only)": warpgate.CONST.DELETE,
                "Psychic Slam (Star Spawn Only)": warpgate.CONST.DELETE,
                "Whispering Aura (Star Spawn Only)": warpgate.CONST.DELETE
            }
        },
    }
}
if (summon === 'Star Spawn') { // Summons a Star Spawn Aberrant Spirit Token

    updates = {
        token: { // Changes the image and name of the token
            'img': spiritImg,
            'name': `${summon} Aberrant Spirit of ${casterToken.name}`,
        },
        actor: { // Modifying the actor's AC, HP, CR, and movement
            'name': `${summon} Aberrant Spirit of ${casterToken.name}`,
            'data.attributes.ac.formula': 11 + spelllevel,
            'data.attributes.hp': { value: spiritHP, max: spiritHP },
            'data.details.cr': level,
            'data.attributes.movement': { walk: 30, fly: 30, hover: false },
        },

        embedded: {
            Item: { // Modifying the actor's Features and Attacks
                "Multiattack":
                    { 'name': `Multiattack (${Math.floor(spelllevel / 2)} attacks)` },
                "Psychic Slam (Star Spawn Only)":
                    { 'data.damage.parts': ['1d8 + @mod + ${spelllevel}', 'psychic'] },
                // Deleting unused Items
                "Eye Ray (Beholderkin Only)": warpgate.CONST.DELETE,
                "Claws (Slaad Only)": warpgate.CONST.DELETE,
                "Regeneration (Slaad Only)": warpgate.CONST.DELETE
            }
        },
    }
}

if (summon === 'Beholderkin') { // Summons a Beholderkin Aberrant Spirit Token

    updates = {
        token: { // Changes the image and name of the token
            'img': spiritImg,
            'name': `${summon} Aberrant Spirit of ${casterToken.name}`,
        },
        actor: { // Modifying the actor's AC, HP, CR, and movement
            'name': `${summon} Aberrant Spirit of ${casterToken.name}`,
            'data.attributes.ac.formula': 11 + spelllevel,
            'data.attributes.hp': { value: spiritHP, max: spiritHP },
            'data.details.cr': level,
            'data.attributes.movement': { walk: 30, fly: 30, hover: true },
        },

        embedded: {
            Item: { // Modifying the actor's Features and Attacks
                "Multiattack":
                    { 'name': `Multiattack (${Math.floor(spelllevel / 2)} attacks)` },
                "Eye Ray (Beholderkin Only)":
                    { 'data.damage.parts': ['1d8 + @mod + ${spelllevel}', 'psychic'] },
                // Deleting unused Items
                "Claws (Slaad Only)": warpgate.CONST.DELETE,
                "Psychic Slam (Star Spawn Only)": warpgate.CONST.DELETE,
                "Regeneration (Slaad Only)": warpgate.CONST.DELETE,
                "Whispering Aura (Star Spawn Only)": warpgate.CONST.DELETE
            }
        },
    }
}



async function myEffectFunction(template) {

    let effect = ' ';
    if (summon === 'Slaad') { effect = 'modules/JB2A_DnD5e/Library/Generic/Impact/PartSideImpactSmoke02_01_Regular_Blue_600x600.webm'; }
    if (summon === 'Star Spawn') { effect = 'modules/JB2A_DnD5e/Library/Generic/Impact/GroundCrackImpact_01_Regular_Orange_600x600.webm'; }
    if (summon === 'Beholderkin') { effect = 'modules/JB2A_DnD5e/Library/Generic/Liquid/LiquidSplash01_Regular_Blue_400x400.webm'; }

    //prep summoning area
    new Sequence()
        .effect()
        .file(effect)
        .atLocation(template)
        .center()
        .scale(0.3)
        //.belowTokens()
        .play()
}

async function postEffects(template, token) {
    //bring in our token
    new Sequence()
        .animation()
        .on(token)
        .fadeIn(1500)
        .play()
}

const callbacks = {
    pre: async (template, update) => {
        myEffectFunction(template);
        await warpgate.wait(500);
    },
    post: async (template, token) => {
        postEffects(template, token);
        await warpgate.wait(500);
    }
};

const options = { controllingActor: actor };

await warpgate.spawn(summonType, updates, callbacks, options);
